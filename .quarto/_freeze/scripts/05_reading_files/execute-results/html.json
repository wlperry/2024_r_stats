{
  "hash": "aa66934eb2689a619cdd5b1a443fb4c3",
  "result": {
    "markdown": "---\ntitle: \"Reading and writing data\"\n---\n\n\n# Objective\n\n## How to read in data and write data back to a CSV file\n\nThe first and most important thing to be able to do is to read in a file - do stuff - and then save what you did to that file in the output directory. We will practice reading in CSV and Excel files.\n\n## Data for the exercise\n\n[This page has a link to all of the data files](/scripts/99_example_data_files.qmd)\n\nWe will use a mock data file that uses M&M's\n\n[M&M CSV file](/data/mms.csv) and also the [M&M Excel file](/data/mms.xlsx)\n\n## Load Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load the libraries each time you restart R\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(readxl)\nlibrary(scales)\nlibrary(skimr)\nlibrary(janitor)\nlibrary(patchwork)\n```\n:::\n\n\n## Read in the file\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in file using tidyverse code-----\nmm.df <- read_csv(\"../data/mms.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 816 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): center, color\ndbl (2): diameter, mass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n#### Read in excel files\n\nNote that you can read in excel files in the same way.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Note you can read in excel files just as easy\n  mm_excel.df <- read_excel(\"../data/mms.xlsx\")\n```\n:::\n\n\n## Look at dataframe structure\n\nOne way is to click the blue trianlge in the environment tab in the upper right\\\nYou can also use code to inspect the structure of the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# data Structure\nstr(mm.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [816 × 4] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ center  : chr [1:816] \"peanut butter\" \"peanut butter\" \"peanut butter\" \"peanut butter\" ...\n $ color   : chr [1:816] \"blue\" \"brown\" \"orange\" \"brown\" ...\n $ diameter: num [1:816] 16.2 16.5 15.5 16.3 15.6 ...\n $ mass    : num [1:816] 2.18 2.01 1.78 1.98 1.62 2.59 1.9 2.55 2.07 2.26 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   center = col_character(),\n  ..   color = col_character(),\n  ..   diameter = col_double(),\n  ..   mass = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n\n```{.r .cell-code}\n# or\nglimpse(mm.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 816\nColumns: 4\n$ center   <chr> \"peanut butter\", \"peanut butter\", \"peanut butter\", \"peanut bu…\n$ color    <chr> \"blue\", \"brown\", \"orange\", \"brown\", \"yellow\", \"brown\", \"yello…\n$ diameter <dbl> 16.20, 16.50, 15.48, 16.32, 15.59, 17.43, 15.45, 17.30, 16.37…\n$ mass     <dbl> 2.18, 2.01, 1.78, 1.98, 1.62, 2.59, 1.90, 2.55, 2.07, 2.26, 1…\n```\n:::\n:::\n\n\n## Saving files\n\nBefore we go too far it is often important to save the modified data\\\nWe can use the read_r package to do this with write_csv\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Saving files -----\n# We can save the file we just read in using \n# Saving dataframes -----\n# lets say you have made a lot of changes and its now time to save the dataframe\nwrite_csv(mm.df, \"../output/mm_output.csv\")\n```\n:::\n",
    "supporting": [
      "05_reading_files_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}